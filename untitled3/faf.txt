------------------------------------------------
实验九、 多继承，继承中的类型兼容、构造、析构函数执行顺序及访问控制

实验目的：
1. 实践多继承
2. 掌握继承中的类型兼容
3. 掌握继承中的构造、析构函数、初始化执行顺序及访问控制；
4. 掌握继承中同名隐藏问题的解决方案，虚基类。

实验内容：
参照《C++语言程序设计》学生用书，完成以下实验：


1. 练习7-3.cpp，继承中的类型兼容，截图并解释运行结果。

2. 练习例7-5.cpp， 截图解释运行结果，为什么输出的顺序是这样的？
   此题main()函数中增加如下一句，会出现什么错误，请解释。
     Derived obj1;

3. 探索继承中的同名隐藏问题。
   练习例7-6.cpp， 尝试做如下修改：
    （1）在Base1中增加fun(int a)函数；
    （2）在Base2增加fun(int a,int b)函数；
    （3）在main()函数中增加如下语句：
      	d.fun(1);
		d.fun(2,3);
   测试是否可以通过编译？（即Derived类中的fun()是否同名隐藏了父类形参不同的同名函数？）


4.（1） 在例7_7.cpp的main()函数中增加输出语句（如下），问有几个var0?
  如果再增加输出语句 cout<<d.var0<<"  "<<d.Base0::var0<<endl; 会怎样？为什么？
int main() {	//程序主函数
	Derived d;			//定义Derived类对象d
	d.Base1::var0 = 2;	//使用直接基类
	d.Base1::fun0();
	d.Base2::var0 = 3;	//使用直接基类
	d.Base2::fun0();
	cout<<d.Base1::var0<<"  "<<d.Base2::var0<<endl;  //有几个var0?
	return 0;
}

 （2）练习第7_8.cpp，将main函数改为如下，解释运行结果。
int main() {	//程序主函数
	Derived d(1);	//定义Derived类对象d
	cout<<d.var0<<"  "<<d.Base1::var0<<"  "<<d.Base2::var0<<endl;

	d.var0 = 2;	//直接访问虚基类的数据成员
	d.fun0();	//直接访问虚基类的函数成员
	cout<<d.var0<<"  "<<d.Base1::var0<<"  "<<d.Base2::var0<<endl;

	d.Base1::var0=1;
	d.Base2::var0=3;
	cout<<d.var0<<"  "<<d.Base1::var0<<"  "<<d.Base2::var0<<endl;
	return 0;
}